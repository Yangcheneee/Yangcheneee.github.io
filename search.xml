<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>爬虫-写在前面</title>
      <link href="/2023/09/14/spider_pre/"/>
      <url>/2023/09/14/spider_pre/</url>
      
        <content type="html"><![CDATA[<p><em>如果你有任何问题，在评论提出</em></p><h2 id="1-爬虫？"><a href="#1-爬虫？" class="headerlink" title="1. 爬虫？"></a>1. 爬虫？</h2><p>爬虫（Spider）常常用于批量获取网络数据资源。</p><p>依托于大数据时代，爬虫在互联网中的地位逐渐凸显，以下是爬虫一些具体应用。</p><ul><li>爬取社交媒体的热点事件评论可以帮助我们分析舆论倾向。</li><li>爬取资源（图片&#x2F;音乐&#x2F;视频）分享到互联网，做一个资源（图片&#x2F;音乐&#x2F;视频）网站。</li><li>爬取数据可以作为机器学习的数据集，像情感分析模型，AI绘画模型都会依赖大量数据集。</li><li>当然，如果你尝试编写爬虫，相信你会对Web有新的理解同时提高你的python编程能力。</li></ul><h2 id="2-爬虫学习基础？"><a href="#2-爬虫学习基础？" class="headerlink" title="2. 爬虫学习基础？"></a>2. 爬虫学习基础？</h2><p>如果你对Web和HTTP协议没有基本的了解并且没有什么python编程基础，我相信这些都不是什么问题，爬虫并没有那么困难。</p><p>人生的困难和挫折就像薛定谔的猫。当你尝试阅读这篇博客，编写代码并坚持下去，心里成见的大山也变为了晴空万里的草原。</p><p>你什么都不会，你开始你将什么都会。</p><h2 id="3-爬虫的一些理解"><a href="#3-爬虫的一些理解" class="headerlink" title="3. 爬虫的一些理解"></a>3. 爬虫的一些理解</h2><p>这一部分有一定的局限性，你可以参考。</p><ul><li>爬虫或者网络爬虫依靠于Web的HTTP协议，学习爬虫可以让你更加理解Web</li><li>爬虫一般经历三个步骤：向服务器发送请求获取响应文件；分析响应文件提取关键内容；保存内容到本地。</li><li>只要你能在浏览器上看到的，你就能够爬取。因为服务器将数据给你后才能在浏览器显示，所以爬虫也能够请求获取这个数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-微博爬虫实例</title>
      <link href="/2023/09/14/spider_weibo/"/>
      <url>/2023/09/14/spider_weibo/</url>
      
        <content type="html"><![CDATA[<p><em>你需要先了解…</em></p><p><em>关于此文章…</em></p><p>懒得写，贴个源码。<br>需要传入你的cookie</p><pre><code class="python">import requests  # 网络请求import random  # 与time控制网络请求频率import time  # 与random控制网络请求频率import json  # 响应的json数据分析from tqdm import tqdm  # 进度条# 由此函数完成 请求-响应解析 的过程# 接收评论json文件的url，解析json文件并返回评论信息字典（max，total_number,max_id，max_id_type，commentlist[]）def getCommentTnfo(commenturl):    # 请求评论json文件    # print(commenturl)    headers = &#123;        &quot;cookie&quot;: &quot;SUB=_2A25J-Z1_DeRhGeBP4loQ8yvEyzuIHXVrBSM3rDV6PUJbktANLXHDkW1NRQvz7mF3V6LkmIQfpFNkz0dbWMbaAvWq; SUBP=0033WrSXqPxfM725Ws9jqgMF55529P9D9W5Ud4KeeqIoRj0Ip037Z1OD5NHD95QceK.ReKef1h5NWs4DqcjGBgSET-H_M5tt; _T_WM=58995471467; MLOGIN=1; BAIDU_SSP_lcr=https://cn.bing.com/; M_WEIBOCN_PARAMS=oid%3D4945284825617444%26luicode%3D20000061%26lfid%3D4945284825617444%26uicode%3D20000061%26fid%3D4945284825617444; XSRF-TOKEN=17cb5d&quot;,        &#39;user-agent&#39;: &#39;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36 Edg/116.0.1938.76&#39;    &#125;    response = requests.get(commenturl, headers=headers)    # 解析json文件内容：max_id，max_id_type，commentlist[]    # max,total_number是第一次请求要获取的信息    dic = &#123;        &#39;max&#39;: 0,        &#39;total_number&#39;: 0,        &#39;max_id&#39;: 0,        &#39;max_id_type&#39;: 0,        &#39;comment_list&#39;: []    &#125;    comment_json = json.loads(response.text)    if (comment_json[&quot;ok&quot;] == 1):        data = comment_json[&quot;data&quot;]        dic[&quot;max&quot;] = data[&quot;max&quot;]        dic[&quot;total_number&quot;] = data[&quot;total_number&quot;]        dic[&quot;max_id&quot;] = data[&quot;max_id&quot;]        dic[&quot;max_id_type&quot;] = data[&quot;max_id_type&quot;]        list = data[&quot;data&quot;]        for li in list:            user = li[&quot;user&quot;]            name = user[&quot;screen_name&quot;]            gender = user[&quot;gender&quot;]            source = li[&quot;source&quot;]            text = li[&quot;text&quot;]            # print(name + &quot;(&quot; + gender + &quot;|&quot; + source + &quot;)&quot; + &quot;:&quot; + text)            dic[&quot;comment_list&quot;].append(name + &quot;(&quot; + gender + &quot;|&quot; + source + &quot;)&quot; + &quot;:&quot; + text)        return dic    # 如果不写else，那么python默认函数返回None    else:        return dic# 此函数调用getCommentList函数,输入不同的max_id# 输入文章url，返回评论信息def getcomments():    blog = input(&quot;请输入帖子的url:&quot;)    id = blog.split(&#39;/&#39;)[-1]    mid = blog.split(&#39;/&#39;)[-1]    max_id_type = 0    comment_list = []    print(&quot;正在分析中...&quot;)    comment_url = &quot;https://m.weibo.cn/comments/hotflow?id=&quot; + id + &quot;&amp;mid=&quot; + mid + &quot;&amp;max_id_type=&quot; + str(max_id_type)    dic = getCommentTnfo(comment_url)    # max，total_number第一次请求时赋值，分析有多少页和多少评论    max = dic[&quot;max&quot;]    total_number = dic[&quot;total_number&quot;]    max_id = dic[&quot;max_id&quot;]    max_id_type = dic[&quot;max_id_type&quot;]    comment_list = comment_list + dic[&quot;comment_list&quot;]    print(&quot;查询到&quot; + str(max) + &quot;页内容，共计&quot; + str(total_number) + &quot;条评论&quot;)    print(&quot;正在爬取中...&quot;)    for i in tqdm(range(max-1)):    # for i in range(max - 1):        time.sleep(random.uniform(1.0, 3.0))        comment_url = &quot;https://m.weibo.cn/comments/hotflow?id=&quot; + id + &quot;&amp;mid=&quot; + mid + &quot;&amp;max_id=&quot; + str(max_id) + &quot;&amp;max_id_type=&quot; + str(max_id_type)        if(dic[&quot;max_id&quot;]!=0):            dic = getCommentTnfo(comment_url)            max_id = dic[&quot;max_id&quot;]            max_id_type = dic[&quot;max_id_type&quot;]            comment_list = comment_list + dic[&quot;comment_list&quot;]    # 是否预览    preview = input(&quot;共&quot; + str(len(comment_list)) + &quot;条记录，预览（y/n）：&quot;)    if (preview == &quot;y&quot; or preview == &quot;Y&quot;):        for comment in comment_list:            print(comment)    # 是否保存    save = input(&quot;共&quot; + str(len(comment_list)) + &quot;条记录，保存（y/n）：&quot;)    if (save == &quot;y&quot; or save == &quot;Y&quot;):        print(&quot;正在写入中...&quot;)        with open(&quot;comment.txt&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:            for comment in tqdm(comment_list):                f.writelines(comment + &quot;\n&quot;)if __name__ == &#39;__main__&#39;:    while (True):        print(&quot;-------微博评论爬虫-------&quot;)        print(&quot;             by liangyue&quot;)        getcomments()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Web </tag>
            
            <tag> Python </tag>
            
            <tag> Requests </tag>
            
            <tag> 微博 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车载U盘</title>
      <link href="/2023/09/09/other_u/"/>
      <url>/2023/09/09/other_u/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> U盘 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客（四）：优雅的写一篇文章</title>
      <link href="/2023/09/08/blog_posts/"/>
      <url>/2023/09/08/blog_posts/</url>
      
        <content type="html"><![CDATA[<p><em>你需要先了解…</em></p><p><em>有关此文章…</em></p><h1 id="一-MarkDown-MD基础"><a href="#一-MarkDown-MD基础" class="headerlink" title="一. MarkDown&#x2F;MD基础"></a>一. MarkDown&#x2F;MD基础</h1><p>如果你需要向博客上传文章，将MD文档放置到blog&#x2F;hexo&#x2F;source&#x2F;_posts目录下即可。</p><p>类似于WORD文档，MD同样适用于写作和笔记。MD依赖于键盘输入控制文章的排版格式，不需要鼠标意味着你能拥抱更快的写作速度。不必担心的是，MD比WORD要简单的多。</p><p>如果你需要学习，下面是一些MarkDown语法。</p><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><pre><code># 一级标题</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><pre><code>## 二级标题</code></pre><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><pre><code>### 三级标题</code></pre><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><pre><code>#### 四级标题</code></pre><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><pre><code>##### 五级标题</code></pre><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><pre><code>###### 六级标题</code></pre><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-正文"><a href="#2-正文" class="headerlink" title="2. 正文"></a>2. 正文</h2><p>正文</p><pre><code>正文</code></pre><p><strong>加粗</strong></p><pre><code>**加粗**</code></pre><p><em>斜体</em></p><pre><code>*斜体*</code></pre><p><em><strong>加粗&amp;斜体</strong></em></p><pre><code>***加粗&amp;斜体***</code></pre><h2 id="3-图片-链接"><a href="#3-图片-链接" class="headerlink" title="3. 图片&amp;链接"></a>3. 图片&amp;链接</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>复制图片以后在文档的合适位置粘贴。</p><p><img src="/img/blog_posts/1694181786100.jpeg" alt="Alt text"></p><p>当然你可以更改括号中的图片位置，MD文件会识别同目录下的图片。</p><p>如果你把这些图片放在下层的一个目录进行收录，那么请更改括号中的路径。</p><p>另外，你也可以在括号中放置图片的网页链接。</p><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://www.baidu.com/">百度</a></p><pre><code>[百度](https://www.baidu.com/)</code></pre><h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h2><pre><code class="Python">    print(Hello MarkDown!)</code></pre><pre><code>```Python    print(Hello MarkDown!)```</code></pre><p>你可以在 <strong>&#96;&#96;&#96;</strong> 后面指定代码所使用的语言，当然也可以不指定。</p><h1 id="二-MarkDown美化"><a href="#二-MarkDown美化" class="headerlink" title="二. MarkDown美化"></a>二. MarkDown美化</h1><p>butterfly提供了MD的额外样式。你可以引用这些标注放在MD文档的开头。</p><p>下面是本篇文章的头：</p><pre><code>---title: 博客：优雅的写一篇文章date: 2023-9-8updated:tags: [博客,hexo,butterfly,md]categories: 博客keywords:description:top_img: /img/cover/0.jpgcomments:cover: /img/cover/0.jpgtoc:toc_number:toc_style_simple:copyright:copyright_author:copyright_author_href:copyright_url:copyright_info:mathjax:katex:aplayer:highlight_shrink:aside:abcjs:---</code></pre><p>你可以通过网络了解其他标注的作用。</p><h1 id="三-问题？"><a href="#三-问题？" class="headerlink" title="三. 问题？"></a>三. 问题？</h1><h2 id="1-MD文档中的图片放置？"><a href="#1-MD文档中的图片放置？" class="headerlink" title="1. MD文档中的图片放置？"></a>1. MD文档中的图片放置？</h2><p>当你向MD文件中复制一张图片时，这张图片会被复制到MD的同级目录下。</p><p>建议你在目录blog\hexo\source\img\xxx下存放你的文章xxx，同时更改MD文件中的图片路径。</p><pre><code>![Alt text](img/xxx/liangyue.jpg)</code></pre><p><em><strong>Tips：</strong></em></p><p>更换大量图片路径是枯燥且费时的。</p><p>如果你使用VSCode编辑MD，那么使用’Ctrl+F’对图片路径进行批量更换是个不错的方法。</p><h2 id="2-博客文章的封面图片？"><a href="#2-博客文章的封面图片？" class="headerlink" title="2. 博客文章的封面图片？"></a>2. 博客文章的封面图片？</h2><p>你可以将封面图片放置在以下目录：blog\hexo\themes\butterfly\source\img</p><p>然后在MD文件中更改以下配置</p><pre><code>top_img: /img/xxx.jpgcover: /img/xxx.jpg</code></pre><p>里面存放了一些网页配置的图片：网站背景图片；头像；404页面；默认顶图。</p><p>如果可以，建议你新建一个cover目录，保存封面图片。<br>然后更改一下路径</p><pre><code>top_img: /img/cover/0.jpgcover: /img/cover/0.jpg</code></pre><h2 id="3-MD侧边预览"><a href="#3-MD侧边预览" class="headerlink" title="3. MD侧边预览"></a>3. MD侧边预览</h2><p>如果你使用VScode编辑MD，右上角打开侧边预览</p><p><img src="/img/blog_posts/image.png" alt="Alt text"></p><h2 id="4-如果你有任何问题？"><a href="#4-如果你有任何问题？" class="headerlink" title="4. 如果你有任何问题？"></a>4. 如果你有任何问题？</h2><p>欢迎你给我留言</p><p>同时希望你能通过搜索引擎和GPT解决大部分问题</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> VScode </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-Requests模块</title>
      <link href="/2023/09/08/spider_request/"/>
      <url>/2023/09/08/spider_request/</url>
      
        <content type="html"><![CDATA[<p><em>你需要先了解…</em></p><p><em>关于此文章…</em></p><h1 id="一-Requests-概述"><a href="#一-Requests-概述" class="headerlink" title="一. Requests-概述"></a>一. Requests-概述</h1><p>Request是Python的第三方库，用于网络请求并接收返回的数据，你需要在Python的虚拟环境中安装使用。</p><ul><li><p>Request帮助你发送网络请求，同时你可以自定义Request携带的参数。</p></li><li><p>另外，Request模块接收响应请求的数据，并把Response作为函数的返回。</p></li><li><p>如果你想实现一个爬虫，对返回的网页文件进行Xpath&#x2F;正则表达式解析，并将你需要的内容存储即可。</p></li></ul><h1 id="二-Request基础"><a href="#二-Request基础" class="headerlink" title="二. Request基础"></a>二. Request基础</h1><h2 id="1-下载-安装"><a href="#1-下载-安装" class="headerlink" title="1. 下载&amp;安装"></a>1. 下载&amp;安装</h2><pre><code class="cmd">pip/pip3 install requests</code></pre><h2 id="2-Request库"><a href="#2-Request库" class="headerlink" title="2. Request库"></a>2. Request库</h2><h3 id="关于request"><a href="#关于request" class="headerlink" title="关于request"></a>关于request</h3><p>request支持各种HTTP方法，同时你可以指定请求所携带的内容。</p><ul><li>获取响应文件</li></ul><pre><code class="Python">response = request.get(url)</code></pre><ul><li>带上请求头headers</li></ul><pre><code class="Python">response = request.get(url, headers = headers)</code></pre><ul><li>伪装浏览器代理，避免反爬虫<br>*如果你向<a href="https://www.douban.com/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%93%8D%E5%BA%94%E7%A0%81%E4%B8%BA418%EF%BC%8C">https://www.douban.com/发送请求，响应码为418，</a></li></ul><pre><code class="Python">headers = &#123;    &#39;user-agent&#39;:    &#39;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36 Edg/116.0.1938.69&#39;    &#125;</code></pre><h3 id="关于response"><a href="#关于response" class="headerlink" title="关于response"></a>关于response</h3><p>你可以定义参数response（或者其他名字）接收request的返回。</p><ul><li>返回响应状态码</li></ul><pre><code class="Python">status_code = response.status_code</code></pre><ul><li>返回网页HTML文件</li></ul><pre><code class="Python">content = response.content</code></pre><h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><ul><li><a href="https://www.runoob.com/python3/python-requests.html">菜鸟教程</a></li></ul><h1 id="三-代码实例"><a href="#三-代码实例" class="headerlink" title="三. 代码实例"></a>三. 代码实例</h1><pre><code class="python">    import requests    url = &#39;https://www.baidu.com&#39;    response = requests.get(url)    if(response.status_code == 200):        print(response.content)    else:        print(response.status_code)</code></pre><h1 id="四-问题？"><a href="#四-问题？" class="headerlink" title="四. 问题？"></a>四. 问题？</h1><h2 id="1-response-text-response-content返回中文？"><a href="#1-response-text-response-content返回中文？" class="headerlink" title="1. response.text&#x2F;response.content返回中文？"></a>1. response.text&#x2F;response.content返回中文？</h2><p>你可以使用 <em><strong>response.content.decode(‘utf-8’)</strong></em> 使得content正常的显示中文内容。</p><p>另外， <em><strong>response.text</strong></em> 使用推测的解码格式（ISO-8859-1），相当于 <em><strong>response.content.decode(response.encoding)</strong></em> 。</p><h2 id="2-418-I’m-a-teapot？"><a href="#2-418-I’m-a-teapot？" class="headerlink" title="2. 418 | I’m a teapot？"></a>2. 418 | I’m a teapot？</h2><p>大概：服务器表示我是一个茶壶，需要咖啡的话别找我。</p><p>当然，具体意思需要结合实际场景。</p><p>如果某些网站反爬虫，那么如果你不表示你的代理是浏览器的话，你也会收到418。</p><p>解决方案也很简单，使用 <em><strong>headers{‘user-agent’:’xxx’}</strong></em> 来声称你使用浏览器代理访问网站。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Web </tag>
            
            <tag> Python </tag>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发（一）-Maven</title>
      <link href="/2023/09/07/web_maven/"/>
      <url>/2023/09/07/web_maven/</url>
      
        <content type="html"><![CDATA[<p><em>你需要先了解…</em></p><p><em>关于此文章…</em></p><h1 id="一-Maven基础"><a href="#一-Maven基础" class="headerlink" title="一. Maven基础"></a>一. Maven基础</h1><p>Maven用于项目管理，包括以下功能：</p><ul><li><p>依赖管理：依赖指我们项目中使用的第三方Jar包。<br> 在项目构建过程中，需要引入大量依赖，maven帮助你自动导入以及这个依赖所依赖的依赖。另外，maven帮助你管理依赖的版本。</p></li><li><p>简化项目构建：maven提供标准化的Java项目结构,通过Maven你可以快速创建Java项目。</p></li></ul><h1 id="二-Maven实现"><a href="#二-Maven实现" class="headerlink" title="二. Maven实现"></a>二. Maven实现</h1><h2 id="1-Maven下载-安装"><a href="#1-Maven下载-安装" class="headerlink" title="1. Maven下载&amp;安装"></a>1. Maven下载&amp;安装</h2><p> (参考文章)[<a href="https://blog.csdn.net/u012660464/article/details/114113349]">https://blog.csdn.net/u012660464/article/details/114113349]</a></p><h2 id="2-Maven构建项目"><a href="#2-Maven构建项目" class="headerlink" title="2. Maven构建项目"></a>2. Maven构建项目</h2><h2 id="3-pom-xml"><a href="#3-pom-xml" class="headerlink" title="3. pom.xml"></a>3. pom.xml</h2>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> web开发 </tag>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发（三）-TomCat</title>
      <link href="/2023/09/07/web_tomcat/"/>
      <url>/2023/09/07/web_tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="一-TomCat-理论"><a href="#一-TomCat-理论" class="headerlink" title="一. TomCat-理论"></a>一. TomCat-理论</h1><h2 id="1-Tomcat基础"><a href="#1-Tomcat基础" class="headerlink" title="1. Tomcat基础"></a>1. Tomcat基础</h2><p>TomCat是一个Web服务器，它默认活跃在电脑的8080端口，接收HTTP请求。</p><p>同时，TomCat提供规范的HTTP接口，它接收规范的HTTP请求，对于Response，你也不需要自己编写，因为TomCat帮助你返回标准的Response。</p><p>下面是具体实现：</p><ul><li><p>当你访问此localhost:8080时，浏览器或者其他代理发送的HTTP请求将会被TomCat截获，</p></li><li><p>如果你在SpringBoot框架中使用TomCat，你可以获取HTTP请求，对数据做处理。</p></li><li><p>最后，你希望对这个请求作出响应，TomCat帮助你构建标准的HTTP响应。</p></li></ul><h1 id="二-TomCat-实现"><a href="#二-TomCat-实现" class="headerlink" title="二. TomCat-实现"></a>二. TomCat-实现</h1><h2 id="1-依赖和配置"><a href="#1-依赖和配置" class="headerlink" title="1. 依赖和配置"></a>1. 依赖和配置</h2><p>当你新建一个SpringBoot项目时，该项目集成了TomCat。</p><p>因此，你不必要花时间去配置TomCat。</p><h2 id="2-Controller类"><a href="#2-Controller类" class="headerlink" title="2. Controller类"></a>2. Controller类</h2><p>一般来说，我们把对请求的处理封装在Controller类中。</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>你可以在使用这个注解标注为Controller类，在这个类中你可以定义函数处理HTTP请求。</p><p>@RestController &#x3D; @Controller + @ResponseBody</p><p>@Controller：将当前修饰的类注入SpringBoot IOC容器，使得从该类所在的项目跑起来的过程中，这个类就被实例化。当然也有语义化的作用，即代表该类是充当Controller的作用</p><p>@ResponseBody：它的作用简短截说就是指该类中所有的API接口返回的数据，甭管你对应的方法返回Map或是其他Object，它会以Json字符串的形式返回给客户端，本人尝试了一下，如果返回的是String类型，则仍然是String。</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>你可以使用这个注解标注函数接收的HTTP请求类型和路径，这样函数对应一个接口。</p><p>@RequestMapping有两个参数，你可以指定HTTp方法，以及接收的参数。</p><p>更简单的方法是使用@GetMapping&#x2F;PostMapping&#x2F;DeleteMapping&#x2F;PutMapping这样你只需要指定接收路径。</p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>指定函数必须从HTTP请求中接收的参数，否则报错。</p><h2 id="3-代码实例"><a href="#3-代码实例" class="headerlink" title="3. 代码实例"></a>3. 代码实例</h2><pre><code>@RestControllerpublic class UserController &#123;    @GetMapping(&quot;/index&quot;)    public String getIndex(@RequestParam String name)&#123;        return &quot;Hello &quot;+name;    &#125;&#125;</code></pre><p>当你访问<a href="http://localhost:8080/index?name=tomcat">http://localhost:8080/index?name=tomcat</a>时，你传入name参数值为tomcat。Controller接收后，在响应中返回hello tomcat。</p>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> web开发 </tag>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发（二）-SpringBoot</title>
      <link href="/2023/09/07/web_springboot/"/>
      <url>/2023/09/07/web_springboot/</url>
      
        <content type="html"><![CDATA[<p><em>你需要先了解…</em></p><p><em>有关此文章…</em></p><h1 id="一-新建SpringBoot项目"><a href="#一-新建SpringBoot项目" class="headerlink" title="一. 新建SpringBoot项目"></a>一. 新建SpringBoot项目</h1><h2 id="1-IDEA新建SpringBoot项目"><a href="#1-IDEA新建SpringBoot项目" class="headerlink" title="1. IDEA新建SpringBoot项目"></a>1. IDEA新建SpringBoot项目</h2><p>(参考文章)[<a href="https://blog.csdn.net/qq_43006591/article/details/106137465]">https://blog.csdn.net/qq_43006591/article/details/106137465]</a></p><h1 id="二-SpringBoot框架解析"><a href="#二-SpringBoot框架解析" class="headerlink" title="二. SpringBoot框架解析"></a>二. SpringBoot框架解析</h1><h2 id="1-idea"><a href="#1-idea" class="headerlink" title="1. .idea"></a>1. .idea</h2><h2 id="2-mvn"><a href="#2-mvn" class="headerlink" title="2. .mvn"></a>2. .mvn</h2><h2 id="3-src"><a href="#3-src" class="headerlink" title="3. src"></a>3. src</h2><h3 id="main"><a href="#main" class="headerlink" title="&#x2F;main"></a>&#x2F;main</h3><ul><li>&#x2F;resource&#x2F;static<br>存放CSS，JS以及图片等</li><li>&#x2F;resource&#x2F;templates<br>存放Web页面</li><li>application.properties&#x2F;application.yml<br>用于存放程序的各种依赖模块的配置信息，比如 服务端口，数据库连接配置等</li><li>&#x2F;main&#x2F;java&#x2F;com.example.xxx<br>存放java源码</li><li>&#x2F;main&#x2F;java&#x2F;Application.java<br>SpringBoot 程序执行的入口，执行该程序中的 main 方法，启动当前SpringBoot项目。</li></ul><h3 id="test"><a href="#test" class="headerlink" title="&#x2F;test"></a>&#x2F;test</h3><p>与mian目录结构类似，没有resource目录。</p><p>存放测试代码。</p><h2 id="4-target"><a href="#4-target" class="headerlink" title="4. target"></a>4. target</h2><p>如果你想测试某个单元，在这里启动它。</p><h2 id="5-gitignore"><a href="#5-gitignore" class="headerlink" title="5. gitignore"></a>5. gitignore</h2><p>使用版本控制工具 git 的时候，设置一些忽略提交的内容</p><h2 id="6-xxx-iml"><a href="#6-xxx-iml" class="headerlink" title="6. xxx.iml"></a>6. xxx.iml</h2><p>intellij idea的工程配置文件，里面是当前project的一些配置信息</p><h2 id="7-HELP-md"><a href="#7-HELP-md" class="headerlink" title="7. HELP.md"></a>7. HELP.md</h2><p>项目的帮助文档，相当于记事本</p><h2 id="8-mvnw"><a href="#8-mvnw" class="headerlink" title="8. mvnw"></a>8. mvnw</h2><p>主要是用于当用户使用maven的命令时，发现本地的maven版本与.mvn文件夹下的maven-wrapper.properties文件中的maven版本不一致，就会下载maven-wrapper.properties文件中的maven版本，然后来执行maven命令，用于Linux环境</p><h2 id="9-mvnw-cmd"><a href="#9-mvnw-cmd" class="headerlink" title="9. mvnw.cmd"></a>9. mvnw.cmd</h2><p>同上，用于Windows环境</p><h2 id="10-pom-xml"><a href="#10-pom-xml" class="headerlink" title="10. pom.xml"></a>10. pom.xml</h2><p>maven依赖的配置</p><h1 id="三-了解更多"><a href="#三-了解更多" class="headerlink" title="三. 了解更多"></a>三. 了解更多</h1><p>(SpringBoot官网)[<a href="https://spring.io/projects/spring-boot]">https://spring.io/projects/spring-boot]</a></p>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> web开发 </tag>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发（五）-JWT</title>
      <link href="/2023/09/06/web_jwt/"/>
      <url>/2023/09/06/web_jwt/</url>
      
        <content type="html"><![CDATA[<p><em>这篇文章将会向你介绍JWT的理论基础和程序实现</em></p><h1 id="一-JWT-理论"><a href="#一-JWT-理论" class="headerlink" title="一. JWT-理论"></a>一. JWT-理论</h1><h2 id="JWT基础"><a href="#JWT基础" class="headerlink" title="JWT基础"></a>JWT基础</h2><p><em>如果你没有任何基础，请耐心看完这一部分</em></p><p>想象一下你登录某个网站的场景。你从登录页面输入账号密码进入到该网站，同时该网站返回你的个人信息，包括你的昵称，头像，个性签名，显示到网页上。更重要的是，登录网站意味着你的身份得到服务器的验证，你获得了访问你的个人信息的权限。</p><p>服务器通过账号密码识别我们的身份吗？是，但不完全是。首先，你需要明白我们浏览器所依靠的http协议是无状态的。这就好像你和一个记忆力差劲的人交流，每一轮对话之后，他都会忘记你的名字。所以，你在每次和他说话之前，都需要重申你的身份。服务器就像这么一个人，尽管你对它说尽千言万语，而服务器只会在众多用户中迷失你的名字。</p><p>那么，这是否意味着我们必须在每一个请求之前都输入我们的账号密码来告知服务器我们的合法身份呢？答案是否定的，有更简单的解决方案。JWT（JSON WEB TOKEN）就是一种实现方式。</p><p>在输入账号密码之后，服务器会返回一个token给我们。以后在每次请求，我们带上token，服务器便会在用户中认出你。但是，如果你企图修改token，服务器能轻易检查出。这一部分是通过签名实现，当服务器用秘钥对token签名后，任何对token的更改都需要这个秘钥。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>JWT由三个部分组成：header，payload，signature。header标识类型和签名算法。payload一般会存放标识你的一些信息账号id，用户名等。signnature是服务器的签名，防止你篡改上一部分的信息冒充他人。</p><h3 id="header："><a href="#header：" class="headerlink" title="header："></a>header：</h3><pre><code>&#123;    &#39;typ&#39;: &#39;JWT&#39;,    &#39;alg&#39;: &#39;HS256&#39;&#125;</code></pre><p><em>类型是JWT；签名算法是HS256</em></p><h3 id="一般header会进行base64编码："><a href="#一般header会进行base64编码：" class="headerlink" title="一般header会进行base64编码："></a>一般header会进行base64编码：</h3><pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</code></pre><h3 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h3><pre><code>&#123;    &quot;sub&quot;: &quot;1234567890&quot;,    &quot;name&quot;: &quot;John Doe&quot;,    &quot;admin&quot;: true&#125;</code></pre><p><em>iss: jwt签发者；sub: jwt所面向的用户；aud: 接收jwt的一方；exp: jwt的过期时间，这个过期时间必须要大于签发时间；nbf: 定义在什么时间之前，该jwt都是不可用的.；iat: jwt的签发时间；jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</em></p><h3 id="一般会对payload进行base64编码："><a href="#一般会对payload进行base64编码：" class="headerlink" title="一般会对payload进行base64编码："></a>一般会对payload进行base64编码：</h3><pre><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code></pre><h2 id="signature："><a href="#signature：" class="headerlink" title="signature："></a>signature：</h2><p>signature对上面两部分的base64编码使用key进行签名</p><pre><code>HMACSHA256（base64(header) . base64(payload) , key）</code></pre><p>一般像这样：<br>      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</p><h2 id="JWT-1"><a href="#JWT-1" class="headerlink" title="JWT"></a>JWT</h2><p>将这三部分合并，中间用“.”分隔，得到一个完整的JWT</p><pre><code>  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</code></pre><h1 id="二-JWT-实现"><a href="#二-JWT-实现" class="headerlink" title="二. JWT-实现"></a>二. JWT-实现</h1><h2 id="0-添加依赖"><a href="#0-添加依赖" class="headerlink" title="0. 添加依赖"></a>0. 添加依赖</h2><pre><code>    &lt;!--JWT--&gt;    &lt;dependency&gt;        &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;        &lt;artifactId&gt;jjwt&lt;/artifactId&gt;        &lt;version&gt;0.9.1&lt;/version&gt;    &lt;/dependency&gt;</code></pre><h2 id="1-生成token"><a href="#1-生成token" class="headerlink" title="1. 生成token"></a>1. 生成token</h2><pre><code>//token有效时间private static long expire = 604800;//校验token有效性秘钥private static String key = &quot;aaaabbbbccccddddaaaabbbbccccdddd&quot;;//token生成public static String generateToken(String username)&#123;Date now = new Date();Date expiration = new Date(now.getTime()+1000*expire);return Jwts.builder()//          .setHeaderParams()            .setSubject(username)            .setIssuedAt(now)            .setExpiration(expiration)            .signWith(SignatureAlgorithm.HS512,key)            .compact();&#125;</code></pre><h2 id="2-token校验"><a href="#2-token校验" class="headerlink" title="2. token校验"></a>2. token校验</h2><pre><code>//token校验public static Claims getClaimsByToken(String token)&#123;    return Jwts.parser()            .setSigningKey(key)            .parseClaimsJws(token)            .getBody();&#125;</code></pre><h2 id="3-一个简单的例子"><a href="#3-一个简单的例子" class="headerlink" title="3. 一个简单的例子"></a>3. 一个简单的例子</h2><p>你可以将上面两个函数封装在JwtUtils的类中，在Controller中调用token相关的函数在网络请求中使用token。</p><pre><code>String token = generateToken(name);</code></pre><p>登录之后将token返回到客户端。</p><pre><code>getClaimsByToken(token).getSubject().equals(name)</code></pre><p>校验客户端的token后，允许其访问对应接口。</p>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> web开发 </tag>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发（四）-MyBatis</title>
      <link href="/2023/09/06/web_mybatis/"/>
      <url>/2023/09/06/web_mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="一-MyBatis-理论"><a href="#一-MyBatis-理论" class="headerlink" title="一. MyBatis-理论"></a>一. MyBatis-理论</h1><p>这一部分我也不是很了解，简单的写点理解。</p><h2 id="1-MyBatis基础"><a href="#1-MyBatis基础" class="headerlink" title="1. MyBatis基础"></a>1. MyBatis基础</h2><p>MyBatis将数据库语句映射到java函数，将一个函数同SQL语句绑定后，当你调用这个函数，对应的SQL语句将会执行，并且返回参数到函数的返回值。</p><p>同时，MyBatis将数据库的表和java的对象做了很好的连接。在MyBatis的作用下，映射SQL查询语句的函数可以返回java对象。</p><h1 id="二-MyBatis实现"><a href="#二-MyBatis实现" class="headerlink" title="二. MyBatis实现"></a>二. MyBatis实现</h1><h2 id="1-依赖和配置"><a href="#1-依赖和配置" class="headerlink" title="1. 依赖和配置"></a>1. 依赖和配置</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>你可以直接使用MyBatis-plus版本，它支持MyBatis</p><pre><code>    &lt;!--mybatis-plus--&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;        &lt;version&gt;3.4.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--Mysql jdbc驱动--&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.47&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--druid 连接池--&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;druid&lt;/artifactId&gt;        &lt;version&gt;1.1.20&lt;/version&gt;    &lt;/dependency&gt;</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>spring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTCspring.datasource.username=rootspring.datasource.password=root</code></pre><h2 id="2-新建实体类"><a href="#2-新建实体类" class="headerlink" title="2. 新建实体类"></a>2. 新建实体类</h2><p>这是一个简单的User类，定义了id，name，password三个属性，以及set，get，toString三个方法。</p><pre><code>public class User &#123;    private int id;    private String name;    private String password;    public int getId() &#123;        return id;    &#125;    public String getName()&#123;        return name;    &#125;    public String getPassword()&#123;        return password;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;id=&quot; + id +                &quot;, name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, password=&#39;&quot; + password + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;</code></pre><h2 id="新建Mapper接口"><a href="#新建Mapper接口" class="headerlink" title="新建Mapper接口"></a>新建Mapper接口</h2><p>在下面代码中，你可以阅读注释，你很容易明白这些@注解的作用。</p><pre><code>@Mapperpublic interface UserMapper&#123;    //返回查询对象的集合    @Select(&quot;select * from user&quot;)    public List&lt;User&gt; findAll();    //返回查询对象    @Select(&quot;select * from user where id = #&#123;id&#125;&quot;)    public User findById(int id);    //将数据库insert语句映射到java程序的insert方法    //返回值为插入语句影响的记录数目    @Insert(&quot;insert into user values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)    public int insert(int id, String name,String password);    //将数据库delete语句映射到java程序的delete方法    //返回值为删除语句影响的记录数目    @Delete(&quot;delete  from user where id = #&#123;id&#125;&quot;)    public int delete(int id);    //将数据库update语句映射到java程序的update方法    //返回值为更新语句影响的记录数目    @Update(&quot;update user set name = #&#123;newName&#125;,password= #&#123;newPassword&#125; where id = #&#123;id&#125;&quot;)    public int update(int id,String newName,String newPassword);&#125;</code></pre><h2 id="3-编写Controller方法"><a href="#3-编写Controller方法" class="headerlink" title="3. 编写Controller方法"></a>3. 编写Controller方法</h2><p>通过Mapper类你可以将数据库表的数据轻松的赋给java对象或者对数据库进行操作。</p><p>下面是一个用户登录的例子</p><pre><code>@RestControllerpublic class UserController &#123;    @Autowired    private UserMapper userMapper;    //登录    @PostMapping(&quot;/&quot;)    public String login(@RequestParam String name,@RequestParam String password)&#123;        //权限标识        int verify = 0;        //检查账号，密码        List&lt;User&gt; list = userMapper.findAll();        for(int i=0; i&lt;list.size(); i++)&#123;            User useri = list.get(i);            if(useri.getName().equals(name) &amp;&amp; useri.getPassword().equals(password))&#123;                verify = 1;                break;            &#125;        &#125;        //权限判断        if(verify==1)&#123;            return &quot;login&quot;;        &#125;else&#123;            return &quot;error&quot;;        &#125;    &#125;    //返回用户个人信息    @GetMapping(&quot;/user&quot;)    public String info(@RequestParam int id,@RequestParam String name,@RequestParam String token) &#123;        if(getClaimsByToken(token).getSubject().equals(name))&#123;        User user = userMapper.findById(id);        return user.toString();        &#125;else&#123;            return &quot;error&quot;;        &#125;    &#125;    //用户注册    @PostMapping(&quot;/user&quot;)    public String register(@RequestParam String name,@RequestParam String password)&#123;        int id = 0;        userMapper.insert(id,name,password);        return &quot;register&quot;;    &#125;    //用户注销    @DeleteMapping(&quot;/user&quot;)    public String delete(@RequestParam int id)&#123;        userMapper.delete(id);        return &quot;delete&quot;;    &#125;    //修改个人信息    @PutMapping(&quot;/user&quot;)    public String update(@RequestParam int id,@RequestParam String newName,@RequestParam String newPassword) &#123;        userMapper.update(id,newName,newPassword);        return &quot;update&quot;;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> web开发 </tag>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> mybatis </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发-写在前面</title>
      <link href="/2023/09/06/web_pre/"/>
      <url>/2023/09/06/web_pre/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> web开发 </tag>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线AI绘画</title>
      <link href="/2023/08/25/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/"/>
      <url>/2023/08/25/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="在线AI绘画"><a href="#在线AI绘画" class="headerlink" title="在线AI绘画"></a>在线AI绘画</h1><h2 id="网址：LiblibAI·哩布哩布AI-中国领先原创AI模型分享社区"><a href="#网址：LiblibAI·哩布哩布AI-中国领先原创AI模型分享社区" class="headerlink" title="网址：LiblibAI·哩布哩布AI-中国领先原创AI模型分享社区"></a>网址：<a href="LiblibAI%C2%B7%E5%93%A9%E5%B8%83%E5%93%A9%E5%B8%83AI-%E4%B8%AD%E5%9B%BD%E9%A2%86%E5%85%88%E5%8E%9F%E5%88%9BAI%E6%A8%A1%E5%9E%8B%E5%88%86%E4%BA%AB%E7%A4%BE%E5%8C%BA">LiblibAI·哩布哩布AI-中国领先原创AI模型分享社区</a></h2><h2 id="教程："><a href="#教程：" class="headerlink" title="教程："></a>教程：</h2><h3 id="1-进入绘画页面"><a href="#1-进入绘画页面" class="headerlink" title="1. 进入绘画页面"></a>1. 进入绘画页面</h3><p>点击网址，来到在线 AI 绘画首页。登录你的账号（QQ 就行）。点击右上角<em><strong>在线Stable Diffusion</strong></em>，进入在线绘画页面。</p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image.png" alt="Alt text"></p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-1.png" alt="Alt text"></p><h3 id="2-选择模型"><a href="#2-选择模型" class="headerlink" title="2. 选择模型"></a>2. 选择模型</h3><p>在首页中选择一个模型，这里选择<em><strong>麦橘写实</strong></em>。<em>不同的模型适用于不同的类型的图画创作。</em></p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-2.png" alt="Alt text"></p><h3 id="3-复制图片参数"><a href="#3-复制图片参数" class="headerlink" title="3. 复制图片参数"></a>3. 复制图片参数</h3><p>点击模型进入页面查看图片<em><strong>详细信息</strong></em>，这里是图片生成的一些参数，<em><strong>复制</strong></em>就行。</p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-3.png" alt="Alt text"></p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-4.png" alt="Alt text"></p><h3 id="4-填写参数绘画"><a href="#4-填写参数绘画" class="headerlink" title="4. 填写参数绘画"></a>4. 填写参数绘画</h3><p>返回绘画页面，<em><strong>Stable Diffusion 模型选择麦橘写实</strong></em>，<em><strong>粘贴</strong></em>刚才复制的的信息。</p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-9.png" alt="Alt text"></p><p><em>如果你想生成多张图片，修改以下内容。</em></p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-5.png" alt="Alt text"></p><h3 id="5-耐心等待生成图片"><a href="#5-耐心等待生成图片" class="headerlink" title="5. 耐心等待生成图片"></a>5. 耐心等待生成图片</h3><p>点击<em><strong>生成图片</strong></em>，耐心等待就好了。下面是图片展示，AI绘画并不一定完美，可以 PS等工具完善。</p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-6.png" alt="Alt text"></p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-7.png" alt="Alt text"></p><p><img src="/img/ai_%E5%9C%A8%E7%BA%BFAI%E7%BB%98%E7%94%BB/image-8.png" alt="Alt text"></p><h3 id="6-最后"><a href="#6-最后" class="headerlink" title="6.最后"></a>6.最后</h3><p>恭喜你，已经学会了基础的绘图。接下来，选择你喜欢的模型，慢慢了解并调节各种参数，绘画出你喜欢的图片吧！</p><p>对了，上面介绍了文生图模式，图生图模式一样有趣。赶快试试吧，你就是下一个 AI 调教大师。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> ai绘画 </tag>
            
            <tag> 在线ai绘画 </tag>
            
            <tag> 哩布哩布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客（二）：美化你的个人博客</title>
      <link href="/2023/08/22/blog_butterfly/"/>
      <url>/2023/08/22/blog_butterfly/</url>
      
        <content type="html"><![CDATA[<p><em>此文章将会指引你使用butterfly美化你的hexo博客</em></p><h1 id="一-部署butterfly主题"><a href="#一-部署butterfly主题" class="headerlink" title="一. 部署butterfly主题"></a>一. 部署butterfly主题</h1><h2 id="1-butterfly主题"><a href="#1-butterfly主题" class="headerlink" title="1. butterfly主题"></a>1. butterfly主题</h2><p>butterfly是hexo框架下的一个主题。</p><p>butterfly主题：</p><p><img src="/img/blog_butterfly/image.png" alt="Alt text"></p><p>相比于原生的hexo博客样式，我相信你肯定更喜欢butterfly。</p><p>了解更多？<a href="https://butterfly.js.org/">butterfly</a></p><h2 id="2-下载butterfly主题"><a href="#2-下载butterfly主题" class="headerlink" title="2. 下载butterfly主题"></a>2. 下载butterfly主题</h2><p>参考文档：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始</a></p><p>在myblog目录下输入命令安装butterfly：</p><pre><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></pre><h2 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3. 安装插件"></a>3. 安装插件</h2><p>安装pug和stylus渲染器：</p><pre><code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></pre><h2 id="4-应用主题"><a href="#4-应用主题" class="headerlink" title="4. 应用主题"></a>4. 应用主题</h2><p>修改配置文件_config.yml：</p><pre><code>theme: butterfly</code></pre><h2 id="5-升级建议"><a href="#5-升级建议" class="headerlink" title="5. 升级建议"></a>5. 升级建议</h2><p>为了減少升级主题带来的不便，我们可以把主题文件夹中的 _config.yml 重命名为 _config.butterfly.yml，复制到 Hexo 根目录下与_config.yml同级。</p><p>Hexo会自动合并主题中的_config.yml和 _config.butterfly.yml ，如果存在同名配置，会使用_config.butterfly.yml的配置，其优先度较高。所以像和博客网址相关联的固定资料可以设置在_config.yml中，比如博客的标题、作者信息和邮箱等等资料，而和主题样式相关的配置放在 _config.butterfly.yml 中，那么在将来你想换一个主题是很方便的。</p><h1 id="二-美化主题"><a href="#二-美化主题" class="headerlink" title="二. 美化主题"></a>二. 美化主题</h1><h2 id="1-图片-图标"><a href="#1-图片-图标" class="headerlink" title="1. 图片&amp;图标"></a>1. 图片&amp;图标</h2><h3 id="（1）网站图标"><a href="#（1）网站图标" class="headerlink" title="（1）网站图标"></a>（1）网站图标</h3><p><strong>.config.butterfly.yml配置：</strong></p><pre><code>    # Favicon（網站圖標）    favicon: /img/favicon.jpg</code></pre><p>将网站图标favicon.jpg放置在此目录：blog\hexo\themes\butterfly\source\img</p><hr><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/favicon.jpg" alt="Alt text"></p><p><img src="/img/blog_butterfly/image-5.png" alt="Alt text"></p><h3 id="（2）-网站背景图片"><a href="#（2）-网站背景图片" class="headerlink" title="（2） 网站背景图片"></a>（2） 网站背景图片</h3><p><strong>.config.butterfly.yml配置：</strong></p><pre><code># The banner image of home pageindex_img: /img/background.jpg</code></pre><p>将网站背景图片background.jpg放置在此目录：blog\hexo\themes\butterfly\source\img</p><hr><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/background.jpg" alt="Alt text"></p><p><img src="/img/blog_butterfly/image-1.png" alt="Alt text"></p><h3 id="（3）-作者头像"><a href="#（3）-作者头像" class="headerlink" title="（3） 作者头像"></a>（3） 作者头像</h3><pre><code># Avatar (頭像)avatar:img: /img/avatar.jpgeffect: false</code></pre><p>将作者头像avatar.jpg放置在此目录：blog\hexo\themes\butterfly\source\img</p><hr><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/avatar.jpg" alt="Alt text"></p><p><img src="/img/blog_butterfly/image-2.png" alt="Alt text"></p><h3 id="（4）-菜单顶图"><a href="#（4）-菜单顶图" class="headerlink" title="（4） 菜单顶图"></a>（4） 菜单顶图</h3><pre><code># If the banner of page not setting, it will show the top_imgdefault_top_img: /img/default_top_img.jpg</code></pre><p>将菜单顶图default_top_img.jpg放置在此目录：blog\hexo\themes\butterfly\source\img</p><hr><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/default_top_img.jpg" alt="Alt text"></p><p><em>其他菜单页面同样显示默认顶图</em></p><p><img src="/img/blog_butterfly/image-6.png" alt="Alt text"></p><h3 id="（5）-404页面"><a href="#（5）-404页面" class="headerlink" title="（5） 404页面"></a>（5） 404页面</h3><pre><code># Replace Broken Images (替換無法顯示的圖片)error_img:flink: /img/friend_404.gifpost_page: /img/404.jpg# A simple 404 pageerror_404:enable: truesubtitle: &#39;Page Not Found&#39;background: /img/404.jpg</code></pre><p>这里使用默认的设置即可</p><h3 id="（6）-图片懒加载"><a href="#（6）-图片懒加载" class="headerlink" title="（6） 图片懒加载"></a>（6） 图片懒加载</h3><pre><code># Lazyload (圖片懶加載)# https://github.com/verlok/vanilla-lazyloadlazyload:  enable: true  loadingImg: /img/loading.gif  field: site # site/post  placeholder:  blur: false</code></pre><h2 id="2-网站首页"><a href="#2-网站首页" class="headerlink" title="2. 网站首页"></a>2. 网站首页</h2><p><strong>_config.yml配置：</strong></p><pre><code># Sitetitle: 良月的小窝   #网站标题subtitle: &#39;&#39;description: 郎朗晴天   #个性签名keywords:author: 良月    #博客作者language: zh-CN    #网站语言为简体中文timezone: Asia/Shanghai     #Shanghai是中国时区</code></pre><p><strong>_config.butterfly.yml配置：</strong></p><pre><code># the subtitle on homepage (主頁subtitle)subtitle:enable: true# Typewriter Effect (开启打字效果)effect: true# loop (循環打字)loop: true# source調用第三方服務# source: false 關閉調用# source: 1  調用搏天api的隨機語錄（簡體）# source: 2  調用一言網的一句話（簡體）# source: 3  調用一句網（簡體）# source: 4  調用今日詩詞（簡體）# subtitle 會先顯示 source , 再顯示 sub 的內容source: false# 如果有英文逗号&#39; , &#39;,请使用转义字元 &amp;#44;# 如果有英文双引号&#39; &quot; &#39;,请使用转义字元 &amp;quot;# 开头不允許转义字元，如需要，请把整個句子用双引号包住# 如果关闭打字效果，subtitle只会现示sub的第一行文字sub:    - BY 良月    - 山野渐染暮春色，碧落微醺残阳曦。    - 碎花飘落云海地，琐事淡没扶摇时。    - 凡人入梦蝴蝶语，天官醉酒云云归。    - 众生皆苦非尘世，你我逍遥不自知。</code></pre><h2 id="3-侧边栏"><a href="#3-侧边栏" class="headerlink" title="3. 侧边栏"></a>3. 侧边栏</h2><h3 id="个人资料"><a href="#个人资料" class="headerlink" title="个人资料"></a>个人资料</h3><p><strong>Follow Me：</strong></p><pre><code>card_author:    enable: true    description:    button:    enable: true    icon: fab fa-github    text: Follow Me    link: https://github.com/Yangcheneee    #GitHub个人主页</code></pre><p><strong>社交媒体：</strong></p><pre><code># Social Settings (社交圖標設置)# formal:#   icon: link || the description || colorsocial:fab fa-github: https://github.com/Yangcheneee || Githubfab fa-qq:  tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=2657761647&amp;website=www.oicqzone.com || QQfas fa-envelope-open-text: mailto:2657761647@qq.com || Email</code></pre><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/image-11.png" alt="Alt text"></p><h3 id="公告"><a href="#公告" class="headerlink" title="公告"></a>公告</h3><p><strong>.config.butterfly.yml配置：</strong></p><pre><code>card_announcement:    enable: true    content: 欢迎来到我的个人博客</code></pre><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/image-13.png" alt="Alt text"></p><h3 id="网站咨询"><a href="#网站咨询" class="headerlink" title="网站咨询"></a>网站咨询</h3><p><strong>.config.butterfly.yml配置：</strong></p><pre><code>card_webinfo:    enable: true    post_count: true    last_push_date: true    sort_order: # Don&#39;t modify the setting unless you know how it works</code></pre><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/image-14.png" alt="Alt text"></p><h2 id="4-导航菜单"><a href="#4-导航菜单" class="headerlink" title="4. 导航菜单"></a>4. 导航菜单</h2><p><strong>预览：</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/img/blog_butterfly/image-3.png" alt="Alt text"></h2><p><strong>_config.butterfly.yml配置：</strong></p><pre><code># Menu 目錄menu:主页: / || fas fa-home博文 || fa fa-graduation-cap:     分类: /categories/ || fa fa-archive 标签: /tags/ || fa fa-tags 归档: /archives/ || fa fa-folder-open生活 || fas fa-list: 分享: /shuoshuo/ || fa fa-comments 相册: /photos/ || fa fa-camera-retro 音乐: /music/ || fa fa-music 影视: /movies/ || fas fa-video友链: /link/ || fa fa-link留言板: /messageboard/ || fa fa-paper-plane关于笔者: /about/ || fas fa-heart  </code></pre><h2 id="5-本地搜索功能"><a href="#5-本地搜索功能" class="headerlink" title="5. 本地搜索功能"></a>5. 本地搜索功能</h2><p><strong>预览：</strong></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/img/blog_butterfly/image-4.png" alt="Alt text"></h2><p><strong>安装搜索插件：</strong></p><pre><code>npm install hexo-generator-search --save</code></pre><p><strong>_config.butterfly.yml配置：</strong></p><pre><code># Local searchlocal_search:  enable: true  labels:    input_placeholder: Search for Posts    hits_empty: &quot;We didn&#39;t find any results for the search: $&#123;query&#125;&quot; # 如果没有查到内容相关内容显示</code></pre><h2 id="6-博文：分类-标签-归档"><a href="#6-博文：分类-标签-归档" class="headerlink" title="6. 博文：分类|标签|归档"></a>6. 博文：分类|标签|归档</h2><h3 id="创建分类界面"><a href="#创建分类界面" class="headerlink" title="创建分类界面"></a>创建分类界面</h3><pre><code>hexo new page categories</code></pre><p>打开.&#x2F;source&#x2F;categories&#x2F;index.md</p><pre><code>---title: 分类date: 2023-08-20 20:20:51type: &quot;categories&quot;comments: false---</code></pre><h3 id="创建标签页面"><a href="#创建标签页面" class="headerlink" title="创建标签页面"></a>创建标签页面</h3><pre><code>hexo new page tags</code></pre><p>打开.&#x2F;source&#x2F;tags&#x2F;index.md</p><pre><code>---title: 标签date: 2023-08-20 20:20:16type: &quot;tags&quot;comments: falseorderby: randomorder: 1---</code></pre><h3 id="创建归档界面"><a href="#创建归档界面" class="headerlink" title="创建归档界面"></a>创建归档界面</h3><p>默认创建…</p><h2 id="7-生活：分享-相册-音乐-影视"><a href="#7-生活：分享-相册-音乐-影视" class="headerlink" title="7.生活：分享|相册|音乐|影视"></a>7.生活：分享|相册|音乐|影视</h2><p>待更新…</p><h2 id="8-友情链接页面"><a href="#8-友情链接页面" class="headerlink" title="8. 友情链接页面"></a>8. 友情链接页面</h2><p>创建友情链接页面：</p><pre><code>hexo new page link</code></pre><p>打开source&#x2F;link&#x2F;index.md文件：</p><pre><code>---title: 友情链接date: 2023-08-20 22:17:49type: &quot;link&quot;comments: false---</code></pre><p>添加友情链接：</p><p>在Hexo博客目录中的 source&#x2F;_data（如果没有 _data 文件夾，请自行创建），创建一个文件 link.yml</p><pre><code>- class_name: 友情链接  class_desc: 执子之手，与子偕老。  link_list:    - name: Hexo      link: https://hexo.io/zh-tw/      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg      descr: 快速、簡單且強大的網誌框架- class_name: 网站  class_desc: 值得推荐的网站  link_list:    - name: Youtube      link: https://www.youtube.com/      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png      descr: 視頻網站    - name: Weibo      link: https://www.weibo.com/      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png      descr: 中國最大社交分享平台    - name: Twitter      link: https://twitter.com/      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png      descr: 社交分享平台</code></pre><h2 id="9-留言板-评论"><a href="#9-留言板-评论" class="headerlink" title="9. 留言板&amp;评论"></a>9. 留言板&amp;评论</h2><p>创建留言板界面：</p><pre><code>hexo new page messageboard</code></pre><p>打开.&#x2F;source&#x2F;messageboard&#x2F;index.md：</p><pre><code>---title: 留言板date: 2023-08-20 20:21:06types: &quot;messageboard&quot;---</code></pre><h2 id="10-关于笔者"><a href="#10-关于笔者" class="headerlink" title="10. 关于笔者"></a>10. 关于笔者</h2><p>创建关于笔者界面：</p><pre><code>hexo new page about</code></pre><p>打开.&#x2F;source&#x2F;about&#x2F;index.md：</p><pre><code>---title: 关于我date: 2023-08-21 03:20:56type: &quot;about&quot;comments: false---</code></pre><h2 id="11-博文"><a href="#11-博文" class="headerlink" title="11. 博文"></a>11. 博文</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h3 id="文章分享"><a href="#文章分享" class="headerlink" title="文章分享"></a>文章分享</h3><p><strong>_config.butterfly.yml配置：</strong></p><pre><code># Share.js# https://github.com/overtrue/share.jssharejs:enable: truesites: wechat,qq,weibo</code></pre><hr><p><strong>效果图：</strong></p><p><img src="/img/blog_butterfly/image-7.png" alt="Alt text"></p><h2 id="13-音乐播放器"><a href="#13-音乐播放器" class="headerlink" title="13. 音乐播放器"></a>13. 音乐播放器</h2><pre><code>Inject:bottom:- &#39;&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;8674547170&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-autoplay=&quot;true&quot; data-lrcType=&quot;-1&quot;&gt; &lt;/div&gt;&#39;# - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</code></pre><h2 id="14-背景美化"><a href="#14-背景美化" class="headerlink" title="14. 背景美化"></a>14. 背景美化</h2><pre><code># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)fireworks:  enable: true  zIndex: 9999 # -1 or 9999  mobile: false# Typewriter Effect (打字效果)# https://github.com/disjukr/activate-power-modeactivate_power_mode:  enable: true  colorful: true # open particle animation (冒光特效)  shake: false #  open shake (抖動特效)  mobile: true# canvas_nest# https://github.com/hustcc/canvas-nest.jscanvas_nest:  enable: true  color: &#39;0,0,255&#39; #color of lines, default: &#39;0,0,0&#39;; RGB values: (R,G,B).(note: use &#39;,&#39; to separate.)  opacity: 0.7 # the opacity of line (0~1), default: 0.5.  zIndex: -1 # z-index property of the background, default: -1.  count: 99 # the number of lines, default: 99.  mobile: false</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客（一）：从零开始搭建你的个人博客</title>
      <link href="/2023/08/21/blog_hexo/"/>
      <url>/2023/08/21/blog_hexo/</url>
      
        <content type="html"><![CDATA[<p><em>此文章将会指引你搭建hexo框架的博客，并将其部署到Git Hub上。</em></p><h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一. 环境搭建"></a>一. 环境搭建</h1><h2 id="1-安装Nodejs（npm）"><a href="#1-安装Nodejs（npm）" class="headerlink" title="1. 安装Nodejs（npm）"></a>1. 安装Nodejs（npm）</h2><p>下载链接：<a href="https://nodejs.org/en">Nodejs官方网站</a></p><p>这里直接选择官方推荐的稳定版本：Recommend For Most Users。</p><p><img src="/img/blog_hexo/image.png" alt="Alt text"></p><p>安装过程一路回车就好，默认选项不需要任何额外的操作。</p><p>安装完成以后，打开cmd。输入命令：<em><strong>node -v</strong></em>，若返回nodejs版本信息则安装成功。</p><p>nodejs内置npm。输入命令<em><strong>npm -v</strong></em>，返回npm版本信息则安装成功。</p><p><img src="/img/blog_hexo/image-1.png" alt="Alt text"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h2><p><a href="https://git-scm.com/download/win">Git下载网址</a></p><p>下载标注的版本。</p><p><img src="/img/blog_hexo/image-2.png" alt="Alt text"></p><p>安装一路回车就好。</p><h1 id="二-本地部署你的博客"><a href="#二-本地部署你的博客" class="headerlink" title="二. 本地部署你的博客"></a>二. 本地部署你的博客</h1><h2 id="1-安装Hexo，新建hexo框架项目"><a href="#1-安装Hexo，新建hexo框架项目" class="headerlink" title="1. 安装Hexo，新建hexo框架项目"></a>1. 安装Hexo，新建hexo框架项目</h2><p>打开cmd输入命令：<em><strong>npm install -g hexo-cli</strong></em>，等待安装完成即可。</p><p>安装完成以后输入命令：<em><strong>hexo -v</strong></em>查看版本，返回结果则安装成功。</p><p>选择一个用于放置博客文件的文件夹，在此目录下使用命令：<em><strong>hexo init myblog</strong></em>，新建你的博客项目。你可以看到在你的文件夹下多了一个myblog的项目。</p><p>输入命令：<em><strong>cd myblog</strong></em>进入myblog项目，安装npm：<em><strong>npm install</strong></em>即可。</p><h2 id="2-在本地启动你的项目"><a href="#2-在本地启动你的项目" class="headerlink" title="2. 在本地启动你的项目"></a>2. 在本地启动你的项目</h2><p>在你的项目根目录下输入命令：<em><strong>hexo g</strong></em>生成博客网站的文件。</p><p>然后输入命令：<em><strong>hexo server</strong></em>启动你的博客。</p><p>接下来，你可以输入网址：<a href="http://localhost/4000">http://localhost/4000</a> 以访问你的个人博客。</p><p>像这样：</p><p><img src="/img/blog_hexo/image-5.png" alt="Alt text"></p><p>当然，如果你想停止你的博客服务，输入命令：<em><strong>Ctrl C</strong></em>即可。</p><h1 id="四-GiHub搭建博客"><a href="#四-GiHub搭建博客" class="headerlink" title="四. GiHub搭建博客"></a>四. GiHub搭建博客</h1><p>如果你没有GitHub账号，请前往官网注册：<a href="https://github.com/">GitHub官网</a> </p><h2 id="1-新建Pages类型仓库"><a href="#1-新建Pages类型仓库" class="headerlink" title="1. 新建Pages类型仓库"></a>1. 新建Pages类型仓库</h2><p><img src="/img/blog_hexo/image-3.png" alt="Alt text"></p><p><strong>你的仓库名（Repository name）必须是：xxx.github.io（xxx是你GitHub的用户名）</strong></p><p>下面的选项选择Public。</p><p><img src="/img/blog_hexo/image-4.png" alt="Alt text"></p><h2 id="2-安装hexo上传插件"><a href="#2-安装hexo上传插件" class="headerlink" title="2. 安装hexo上传插件"></a>2. 安装hexo上传插件</h2><p>输入命令：<em><strong>npm install hexo-deployer-git –save</strong></em></p><p>这个插件使用git上传hexo生成的网页文件。</p><h2 id="3-修改hexo配置文件指定仓库路径"><a href="#3-修改hexo配置文件指定仓库路径" class="headerlink" title="3. 修改hexo配置文件指定仓库路径"></a>3. 修改hexo配置文件指定仓库路径</h2><p>你可以在目录blog\hexo下找到 <strong>_config.yml</strong> 文件，修改以下配置。</p><p>如果你需要在文档快速定位以下内容，使用 <strong>Ctrl+F</strong> 查找 <strong>Deployment</strong> ，你可以定位文档中所有出现Deployment的地方。</p><pre><code># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:type: &#39;git&#39;repo: https://github.com/Yangcheneee/Yangcheneee.github.io.gitbranch: main</code></pre><p><em>这里将 <strong>yangcheneee</strong> 修改为你的GitHub用户名即可</em></p><h2 id="4-部署博客到对应仓库"><a href="#4-部署博客到对应仓库" class="headerlink" title="4. 部署博客到对应仓库"></a>4. 部署博客到对应仓库</h2><p>输入命令：<em><strong>hexo clean</strong></em>清除之前生成的博客文件</p><p>输入命令：<em><strong>hexo generate</strong></em>（<em><strong>hexo g</strong></em>）生成博客的静态网页文件</p><p>输入命令：<em><strong>hexo deploy</strong></em>（<em><strong>hexo d</strong></em>）将生成的博客文件推送到github仓库</p><p>将博客文件上传到GitHub仓库时，需要进行身份验证，在这个过程中保持登录GitHub，根据提示完成验证即可。</p><p>接下来访问网站：<a href="http://xxx.github.io/">http://xxx.github.io</a> （xxx为你的用户名）即可。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客：写在前面</title>
      <link href="/2023/08/21/blog_pre/"/>
      <url>/2023/08/21/blog_pre/</url>
      
        <content type="html"><![CDATA[<p><em>如果你有任何问题，在评论提出</em></p><h2 id="1-博客？"><a href="#1-博客？" class="headerlink" title="1. 博客？"></a>1. 博客？</h2><p>一些好看的博客：<a href="https://butterfly.js.org/link/#%E7%A4%BA%E4%BE%8B">这里</a></p><p>我的个人博客：<a href="https://yangcheneee.github.io/">良月的小窝</a></p><p><img src="/img/blog_pre/image.png" alt="Alt text"></p><p>你可以通过这个系列文章做出与我相似的个人博客，当然或许更好。</p><h2 id="2-个人博客有啥用？"><a href="#2-个人博客有啥用？" class="headerlink" title="2. 个人博客有啥用？"></a>2. 个人博客有啥用？</h2><ul><li><p>个人博客主要用于记录你的学习笔记，简单来说博客是一个在线记事本。</p></li><li><p>除此之外，个人博客可以用于知识分享，其他人可以通过网络访问你的博客。</p></li><li><p>抑或是用于满足好奇心，抑或是喜欢漂亮的博客页面……</p></li><li><p>总之，搭建你的个人博客并不需要太多理由，只是去做也是一种乐趣！</p></li></ul><h2 id="3-搭建个人博客难吗？"><a href="#3-搭建个人博客难吗？" class="headerlink" title="3. 搭建个人博客难吗？"></a>3. 搭建个人博客难吗？</h2><p>一点都不难！</p><p>你可以不写任何代码，只是安装一些文件并配置它们就可以搭建属于你的个人博客。</p><h2 id="4-如何搭建我的个人博客？"><a href="#4-如何搭建我的个人博客？" class="headerlink" title="4. 如何搭建我的个人博客？"></a>4. 如何搭建我的个人博客？</h2><p>我采用GitHub Pages搭建hexo框架的butterfly主题博客，这是一种简单的方式。</p><p>大概流程：下载框架和主题文件；修改配置以美化你的博客界面；生成网页静态文件上传到Git Hub仓库使得其他人可以访问。</p><p>如果你感兴趣，我很乐意继续讲下去。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/20/hello-world/"/>
      <url>/2023/08/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
